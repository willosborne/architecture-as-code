"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[662],{9420:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var i=t(4848),s=t(8453);const o={id:"nodes",title:"Nodes",sidebar_position:2},r="Nodes in CALM",a={id:"core-concepts/nodes",title:"Nodes",description:'Nodes are one of the core elements of the CALM schema, representing the individual components that make up your architecture. If you were to sketch your system on a whiteboard, nodes would be the "boxes" that represent people, systems, services, databases, or networks.',source:"@site/docs/core-concepts/nodes.md",sourceDirName:"core-concepts",slug:"/core-concepts/nodes",permalink:"/core-concepts/nodes",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"nodes",title:"Nodes",sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Core Concepts",permalink:"/core-concepts/"},next:{title:"Interfaces",permalink:"/core-concepts/interfaces"}},c={},d=[{value:"What is a Node?",id:"what-is-a-node",level:2},{value:"Key Properties of Nodes",id:"key-properties-of-nodes",level:3},{value:"Example of a Node Definition",id:"example-of-a-node-definition",level:3},{value:"Using Nodes Effectively",id:"using-nodes-effectively",level:3}];function l(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"nodes-in-calm",children:"Nodes in CALM"})}),"\n",(0,i.jsx)(n.p,{children:'Nodes are one of the core elements of the CALM schema, representing the individual components that make up your architecture. If you were to sketch your system on a whiteboard, nodes would be the "boxes" that represent people, systems, services, databases, or networks.'}),"\n",(0,i.jsx)(n.h2,{id:"what-is-a-node",children:"What is a Node?"}),"\n",(0,i.jsx)(n.p,{children:"A node is an abstract representation of any component within your system. Nodes can vary in detail, ranging from high-level concepts like entire systems down to specific elements like a single database or service. This flexibility allows you to tailor your architecture to the level of detail that suits your needs."}),"\n",(0,i.jsx)(n.h3,{id:"key-properties-of-nodes",children:"Key Properties of Nodes"}),"\n",(0,i.jsx)(n.p,{children:"Each node within the CALM schema has several key properties that define its behavior and role within the architecture:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"unique-id"}),": A mandatory string that uniquely identifies the node within the architecture. This ID is crucial for defining relationships and ensuring that each component is distinct."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"node-type"}),": Specifies the type of the node, such as actor, system, service, database, network, or webclient. This helps categorize the node and determine its function within the system."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"name"}),": A human-readable name for the node, making it easy to identify and reference in diagrams and discussions."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"description"}),": A brief description of the node, explaining its purpose or role within the architecture."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"detailed-architecture"}),": Optional; allows for linking to a more detailed architectural representation of the node, which can be useful for complex systems or nested architectures."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"interfaces"}),": An optional array defining the interfaces the node exposes, detailing how it interacts with other components."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"controls"}),": Optional controls that specify security or operational policies applied to the node, such as access restrictions or compliance requirements."]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"example-of-a-node-definition",children:"Example of a Node Definition"}),"\n",(0,i.jsx)(n.p,{children:"Here\u2019s a simple example of a node definition:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "unique-id": "service-123",\n  "node-type": "service",\n  "name": "Payment Service",\n  "description": "Handles all payment transactions",\n  "interfaces": [\n    {\n      "unique-id": "api-interface",\n      "type": "host-port-interface",\n      "host": "payments.example.com",\n      "port": 443\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"using-nodes-effectively",children:"Using Nodes Effectively"}),"\n",(0,i.jsx)(n.p,{children:"Nodes are versatile and can be used to represent various levels of your architecture. Use them to:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Define Systems and Services"}),": Break down your architecture into manageable components, each defined as a node."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Capture Detailed Information"}),": Utilize the detailed-architecture field to link to more granular designs, enabling deeper exploration when needed."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Expose Interfaces"}),": Clearly define how each node interacts with others, enhancing understanding and enabling more robust architectural validations."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var i=t(6540);const s={},o=i.createContext(s);function r(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);